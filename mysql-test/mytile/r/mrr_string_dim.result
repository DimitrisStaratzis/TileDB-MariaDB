#
# The purpose of this test is to build and query a table having heterogeneus dimensions with MRR functionality
# including string dimension
#
# FLOAT32, VARCHAR
CREATE TABLE tmhds (d1 float dimension=1 lower_bound="1.0" upper_bound="20.0" tile_extent="5.0",
d2 varchar(255) dimension=1, a int
) ENGINE=mytile;
INSERT INTO tmhds (d1, d2, a) VALUES (1.1, "a", 1);
INSERT INTO tmhds (d1, d2, a) VALUES (1.2, "b", 2);
INSERT INTO tmhds (d1, d2, a) VALUES (1.3, "c", 3);
INSERT INTO tmhds (d1, d2, a) VALUES (1.4, "d", 4);
INSERT INTO tmhds (d1, d2, a) VALUES (1.5, "e", 5);
INSERT INTO tmhds (d1, d2, a) VALUES (1.6, "f", 6);
explain select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	NULL	NULL	NULL	NULL	2	Using temporary; Using filesort
1	SIMPLE	b	ALL	NULL	NULL	NULL	NULL	2	Using where; Using join buffer (flat, BNL join)
# Batch Key Access (Sorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=on';
set join_cache_level=6;
explain select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	NULL	NULL	NULL	NULL	2	Using where with pushed condition; Using temporary; Using filesort
1	SIMPLE	b	hash_ALL	NULL	#hash#$hj	263	test.a.d1,test.a.d2	2	Using where; Using join buffer (flat, BNLH join)
select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
d1	d2	a	a
1.1	a	1	1
1.2	b	2	2
1.3	c	3	3
1.4	d	4	4
1.5	e	5	5
1.6	f	6	6
# Batch Key Access (Unsorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=off';
set join_cache_level=6;
explain select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	NULL	NULL	NULL	NULL	2	Using where with pushed condition; Using temporary; Using filesort
1	SIMPLE	b	hash_ALL	NULL	#hash#$hj	263	test.a.d1,test.a.d2	2	Using where; Using join buffer (flat, BNLH join)
select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
d1	d2	a	a
1.1	a	1	1
1.2	b	2	2
1.3	c	3	3
1.4	d	4	4
1.5	e	5	5
1.6	f	6	6
# Batch Key Access Hash (Sorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=on';
set join_cache_level=8;
explain select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	NULL	NULL	NULL	NULL	2	Using where with pushed condition; Using temporary; Using filesort
1	SIMPLE	b	hash_ALL	NULL	#hash#$hj	263	test.a.d1,test.a.d2	2	Using where; Using join buffer (flat, BNLH join)
select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
d1	d2	a	a
1.1	a	1	1
1.2	b	2	2
1.3	c	3	3
1.4	d	4	4
1.5	e	5	5
1.6	f	6	6
# Batch Key Access Hash (Unsorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=off';
set join_cache_level=8;
explain select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	NULL	NULL	NULL	NULL	2	Using where with pushed condition; Using temporary; Using filesort
1	SIMPLE	b	hash_ALL	NULL	#hash#$hj	263	test.a.d1,test.a.d2	2	Using where; Using join buffer (flat, BNLH join)
select * from `tmhds` a JOIN `tmhds` b USING(`d1`, `d2`) ORDER BY `d1` asc, d2 asc;
d1	d2	a	a
1.1	a	1	1
1.2	b	2	2
1.3	c	3	3
1.4	d	4	4
1.5	e	5	5
1.6	f	6	6
set mytile_delete_arrays=0;
DROP TABLE tmhds;
